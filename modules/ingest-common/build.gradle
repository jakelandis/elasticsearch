import org.elasticsearch.gradle.testclusters.RestTestRunnerTask

import java.nio.file.Paths


/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

esplugin {
  description 'Module for ingest processors that do not require additional security permissions or have large dependencies and resources'
  classname 'org.elasticsearch.ingest.common.IngestCommonPlugin'
  extendedPlugins = ['lang-painless']
}

dependencies {
  compileOnly project(':modules:lang-painless')
  compile project(':libs:elasticsearch-grok')
  compile project(':libs:elasticsearch-dissect')
}

restResources {
  restApi {
    includeCore '_common', 'ingest', 'cluster', 'indices', 'index', 'bulk', 'nodes', 'get', 'update', 'cat', 'mget'
  }
}

testClusters.integTest {
  // Needed in order to test ingest pipeline templating:
  // (this is because the integTest node is not using default distribution, but only the minimal number of required modules)
  module file(project(':modules:lang-mustache').tasks.bundlePlugin.archiveFile)
}

apply plugin: 'elasticsearch.rest-compat-test'



//tasks.create("restCompatTests", RestTestRunnerTask) {
//  mustRunAfter precommit
//  doFirst {
//    System.out.println( "******* " +   rootProject.ext.bwcMinorCheckoutDir);
//    System.out.println(project.getProjectDir())
//    System.out.println(rootProject.getProjectDir())
//    String myRelativePath = rootProject.getProjectDir().relativePath(project.getProjectDir());
//    System.out.println(myRelativePath)
//    def bwcPath = Paths.get(rootProject.ext.bwcMinorCheckoutDir).resolve(Paths.get(myRelativePath)).toFile()
//    System.out.println(bwcPath);
//    File bwcClassPath = new File(bwcPath, "build/resources/test");
//    System.out.println(bwcClassPath);
//
//    System.out.println(project.getConvention().getPlugin(JavaPluginConvention.class)
//      .getSourceSets().findByName(SourceSet.TEST_SOURCE_SET_NAME))
//    FileCollection runtimeClasspath = project.getConvention().getPlugin(JavaPluginConvention.class)
//      .getSourceSets().findByName(SourceSet.TEST_SOURCE_SET_NAME).getRuntimeClasspath();
//    FileCollection x = runtimeClasspath.filter { f ->
//      f.path.endsWith("build/resources/test") == false
//    }
//    project.getConvention().getPlugin(JavaPluginConvention.class)
//      .getSourceSets().findByName(SourceSet.TEST_SOURCE_SET_NAME).getRuntimeClasspath().each { f ->
//      System.out.println("* " + f);
//    }
//    x.each { f ->
//      System.out.println("& " + f)
//    }
//
//
//    project.getConvention().getPlugin(JavaPluginConvention.class)
//      .getSourceSets().findByName(SourceSet.TEST_SOURCE_SET_NAME).setRuntimeClasspath(    project.files(x, bwcClassPath));
//
//    project.getConvention().getPlugin(JavaPluginConvention.class)
//      .getSourceSets().findByName(SourceSet.TEST_SOURCE_SET_NAME).getRuntimeClasspath().each { f ->
//      System.out.println("# " + f);
//    }
//
//  nonInputProperties.systemProperty 'tests.rest.cluster', "${-> testClusters.integTest.getAllHttpSocketURI().join(",")}"
//    nonInputProperties.systemProperty 'tests.rest.compat', "true"
//  }
//  dependsOn ':prepRestCompatTests'
//}


testClusters.restCompatTests {
  //testDistribution = 'DEFAULT'

  // Needed in order to test ingest pipeline templating:
  // (this is because the integTest node is not using default distribution, but only the minimal number of required modules)
  module file(project(':modules:lang-mustache').tasks.bundlePlugin.archiveFile)
  module(project.file(project.tasks.bundlePlugin.archiveFile))
  module file(project(':modules:lang-painless').tasks.bundlePlugin.archiveFile)
}
restCompatTests{
//  useCluster testClusters.integTest

}

restCompatTestsRunner {

  //useCluster testClusters.integTest
  //enabled Boolean.valueOf(System.getProperty("tests.rest.compat.enabled", "false"))
 // dependsOn bundlePlugin
}

